I"¯%<!-- Check whether the assignment is ready to release -->

<div class="alert alert-danger">
Warning: this assignment is out of date.  It may still need to be updated for this year's class.  Check with your instructor before you start working on this assignment.
</div>

<!-- End of check whether the assignment is up to date -->

<!-- Check whether the assignment is up to date -->

<!-- End of check whether the assignment is up to date -->

<div class="alert alert-info">
This assignment is due on Thursday, January 30, 2020 before 01:30PM. 
</div>

<div class="alert alert-info">
You can download the materials for this assignment here:
<ul>

<li><a href="https://colab.research.google.com/github/interactive-fiction-class/interactive-fiction-class.github.io/blob/master/homeworks/text-adventure-game/Text_Adventure_Game.ipynb">Text Adventure Game (Python Notebook viewable on Google Colab)</a></li>

</ul>
</div>

<h1 id="homework-2-nlp-for-text-adventure-games">Homework 2: NLP for Text-Adventure Games</h1>

<p>In the earliest text adventure games, parsers used exact string matching. If a command wasn‚Äôt in either the form <code class="highlighter-rouge">verb</code> or <code class="highlighter-rouge">verb object</code>, the parser would not recognize it. However, parsers and naural language processing (NLP) in general have evolved tremendously since the 1970s. NLP is a vibrant subfield of artificial intelligence.  One of the goals of NLP is to allow computers to understand commands spoken in human language.  This enables technologies like Amazon Alexa, Apple‚Äôs Siri or Google‚Äôs Assistant.</p>

<p>In early interactive fiction games, players were forced to use commands with a strict <code class="highlighter-rouge">verb object</code> syntax.  They can only say things like.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Pick rose"
"Smell rose"
</code></pre></div></div>

<p>We are going to use NLP to will allow players to say something more elaborate like</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Pluck a fresh bloom from the rosebush, and inhale its scent."
</code></pre></div></div>

<p>For this assignment, you will implement two NLP components.  Everyone will implement an <strong>intent detection module</strong>.  The second component is up to you.  We‚Äôll give several suggestions of intereting possible directions, but you can use your creativity and imagination for that part.</p>

<h2 id="task-1-intent-detection">Task 1: Intent Detection</h2>

<p>An intent detection module will take in a natural language command, and determine what the player wants to do.  In the <a href="https://colab.research.google.com/github/interactive-fiction-class/interactive-fiction-class.github.io/blob/master/homeworks/text-adventure-game/Text_Adventure_Game.ipynb">Parser class of the text adventure starter code</a> that we gave you in HW1. there is a <code class="highlighter-rouge">get_player_intent</code> function that takes in a command from the player and returns what the player wants to do, from a set of 8 possibilities:</p>
<ul>
  <li><strong>direction</strong> - the player wants to move somewhere</li>
  <li><strong>examine</strong> - the player wants to look at something</li>
  <li><strong>redescribe</strong> - the player wants to redescribe the current location</li>
  <li><strong>inventory</strong> - the player wants to get a list of things in their inventory</li>
  <li><strong>take</strong> - the player wants to get something and put it in their inventory</li>
  <li><strong>drop</strong> - the player wants to drop something from their inventory</li>
  <li><strong>sequence</strong> - the player issued multiple commands and wants them to be executed as a sequence</li>
  <li><strong>special</strong> - handles special commands that were added (like picking a rose, or hitting a troll with the branch)</li>
</ul>

<p>In the sample code, the  <code class="highlighter-rouge">get_player_intent</code> function is enterly keyword-based.  This has the limitation failing to recognize even simple synonyms.<br />
For instance, in the keyword algorithm the game knows what to do for the <code class="highlighter-rouge">pick rose</code> command, but it will fail to recognize <code class="highlighter-rouge">pick flower</code> or <code class="highlighter-rouge">pluck rose</code>, even though those are preferctly reasonable synonyms that a person can easily understand mean the same as <code class="highlighter-rouge">pick rose</code>.</p>

<p>We would like you to use NLP and machine learning to update the keyword-based parser in our sample code to be able to more robustly handle any input from the user.  In other words, the user should be able to type commands like <em>‚Äúpluck the rose‚Äù</em> or <em>‚Äúpick a flower from the rosebush‚Äù</em> instead of the single one command that it currently recognizes <em>‚Äúpick rose‚Äù</em>.  Similarly, the player should be able to say <em>‚Äúleave the cottage‚Äù</em> instead of just <em>‚Äúout‚Äù</em>.  You will update the <code class="highlighter-rouge">get_player_intent</code> function in the <code class="highlighter-rouge">Parser</code> to be a multi-class text classifier.</p>

<h3 id="1-natural-language-commands-for-action-castle-15-points">1. Natural Language Commands for Action Castle [15 points]</h3>

<p>We‚Äôre going to begin this assignment by brainstorming different ways that a player could say each command.  We will do a play through of Action Castle, and write out different ways of saying each command.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You are standing in a small cottage.
Exits: Out
You see: 
a fishing pole

&gt;pick up the fishing pole
I'm not sure what you want to do.
&gt;take the fishing pole
You take the pole.
&gt;look at the fishing pole
I'm not sure what you want to do.
&gt;examine the fishing rod
You don't see anything special.
&gt;what does the fishing pole look like?
I'm not sure what you want to do.
&gt;examine the fishing pole
A SIMPLE FISHING POLE.
&gt;put the fishing pole down
I'm not sure what you want to do.
&gt;drop the fishing pole
You drop the pole.
&gt;put the pole back into my inventory
You have: a lamp (unlit)

</code></pre></div></div>

<!--
We ask that you take advantage of at least **two** advancements from the last four decades of NLP research to either make your parser more intelligent than simple string matching or to otherwise improve the game-playing experience.
-->

<h3 id="task-2-free-choice">Task 2: Free Choice</h3>

<ol>
  <li>
    <p>Co-reference resolution. Type this into a text adventure game <code class="highlighter-rouge">Pick the rose. Smell it.</code> and it will probably reply something dumb like <code class="highlighter-rouge">I don't know what it is.</code>. Co-reference resolution is an NLP technology for taking pronouns (like she, he, it, they, them, those, etc.) and figuring out what preceeding noun phrase they (see what I did there?) refer to.  You could try using the [Allen NLP Co-reference Resolution Module].  You should give a detailed analysis of how well it works.</p>
  </li>
  <li>
    <p>Add voice.  A speech-to-text module will allow you to speak into your computer‚Äôs microphone and have your voice command converted to text.   Use the Google speech-to-text API to allow a player to talk to the game, and then use the Google‚Äôs text-to-speech to have the game speak its response aloud.</p>
  </li>
  <li>
    <p>Arguments to the verb.  Verbs have argments like <em>the subject</em> (<strong>I</strong> jumped), <em>the direct object</em> (I kicked <strong>the ball</strong>), and the <em>indirect object</em> (I gave the book to <strong>Daphne</strong>).  You can use an NLP system like Spacy or Allen NLP to create a dependency parse to extract the verb its arguments from a user input.  You can then convert them into</p>
  </li>
</ol>

<p>Some possible ideas are:</p>

<ul>
  <li>A guardswoman NPC who will only let you pass if you <a href="https://textblob.readthedocs.io/en/dev/quickstart.html#sentiment-analysis">complement her</a>.</li>
  <li>An ogre who will only marry you if <a href="https://ccc.inaoep.mx/~villasen/bib/LEARNING%20TO%20LAUGH%20(AUTOMATICALLY).pdf">you tell him a joke</a>.</li>
</ul>

<p>There are serveral good NLP toolkits that you can use for this part of the homeowrk:  <a href="https://spacy.io/usage/facts-figures">Spacy</a>, <a href="https://www.nltk.org/">NLTK</a>, or <a href="https://github.com/allenai/allennlp">AllenNLP</a>.</p>

<h2 id="what-to-submit">What to submit</h2>

<ol>
  <li>A colab to run the version of your games from HW1 that includes your improvements.</li>
  <li>A report called either <code class="highlighter-rouge">report.pdf</code> or <code class="highlighter-rouge">report.md</code> that describes how you used <strong>two</strong> advancements in NLP to improve the quality of your game. You should cite relevent papers, and explain how you are using the methods introduced in them.</li>
</ol>

<h2 id="recommended-readings">Recommended readings</h2>

<ul>
  <li>
    <p>Dan Jurafsky and James H. Martin, <a href="https://web.stanford.edu/~jurafsky/slp3/6.pdf">Vector Semantics and Embeddings</a>.  __</p>
  </li>
  <li>
    <p>Ajay Patel, Alexander Sands, Chris Callison-Burch, Marianna Apidianaki, <a href="https://www.aclweb.org/anthology/D18-2021/">Magnitude&amp;colon; A Fast, Efficient Universal Vector Embedding Utility Package</a>.  __</p>
  </li>
  <li>
    <p>Dan Jurafsky and James H. Martin, <a href="https://web.stanford.edu/~jurafsky/slp3/26.pdf">Dialogue Systems and Chatbots</a>.  __</p>
  </li>
</ul>

:ET